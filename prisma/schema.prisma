generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  firstName     String    @map("first_name")
  lastName      String    @map("last_name")
  role          Role      @default(APPLICANT)
  phone         String?
  profilePicture String?  @map("profile_picture")
  resumeUrl     String?   @map("resume_url")
  linkedinUrl   String?   @map("linkedin_url")
  githubUrl     String?   @map("github_url")
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  applications  JobApplication[]
  interviews    Interview[]   @relation("Interviewer")
  stageTransitions StageTransition[] @relation("TransitionedBy")

  @@map("users")
}

model Company {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  logoUrl     String?   @map("logo_url")
  website     String?
  industry    String?
  companySize String?   @map("company_size")
  foundedYear Int?      @map("founded_year")
  location    String?
  isVerified  Boolean   @default(false) @map("is_verified")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  jobs        JobPost[]

  @@map("companies")
}

model JobPost {
  id              String    @id @default(cuid())
  companyId       String    @map("company_id")
  title           String
  description     String    @db.Text
  requirements    String    @db.Text
  responsibilities String   @db.Text @map("responsibilities")
  locationType    LocationType @map("location_type")
  location        String?
  employmentType  EmploymentType @map("employment_type")
  experienceLevel ExperienceLevel @map("experience_level")
  salaryMin       Decimal?  @map("salary_min") @db.Decimal(12, 2)
  salaryMax       Decimal?  @map("salary_max") @db.Decimal(12, 2)
  salaryCurrency  String?   @map("salary_currency") @db.Char(3)
  status          JobStatus @default(DRAFT)
  applicationDeadline DateTime @map("application_deadline")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications    JobApplication[]
  skills          JobSkill[]

  @@map("job_posts")
}

model JobSkill {
  id          String    @id @default(cuid())
  jobPostId   String    @map("job_post_id")
  skillName   String    @map("skill_name")
  isRequired  Boolean   @default(true) @map("is_required")
  jobPost     JobPost   @relation(fields: [jobPostId], references: [id], onDelete: Cascade)

  @@map("job_skills")
}

model JobApplication {
  id            String    @id @default(cuid())
  jobPostId     String    @map("job_post_id")
  applicantId   String    @map("applicant_id")
  status        ApplicationStatus @default(PENDING)
  coverLetter   String?   @db.Text @map("cover_letter")
  resumeVersion String    @map("resume_version")
  currentStage  ApplicationStage @default(INITIAL_REVIEW) @map("current_stage")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  jobPost       JobPost   @relation(fields: [jobPostId], references: [id], onDelete: Cascade)
  applicant     User      @relation(fields: [applicantId], references: [id], onDelete: Cascade)
  interviews    Interview[]
  stageTransitions StageTransition[]

  @@unique([jobPostId, applicantId], name: "unique_application")
  @@map("applications")
}

model Interview {
  id              String    @id @default(cuid())
  applicationId   String    @map("application_id")
  interviewerId   String    @map("interviewer_id")
  type            InterviewType
  scheduledAt     DateTime  @map("scheduled_at")
  durationMinutes Int       @map("duration_minutes")
  location        String?
  meetingLink     String?   @map("meeting_link")
  notes           String?   @db.Text
  rescheduleCount Int       @default(0) @map("reschedule_count")
  status          InterviewStatus @default(SCHEDULED)
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  application     JobApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  interviewer     User      @relation("Interviewer", fields: [interviewerId], references: [id], onDelete: Cascade)
  feedback        InterviewFeedback?

  @@map("interviews")
}

model InterviewFeedback {
  id                  String    @id @default(cuid())
  interviewId         String    @unique @map("interview_id")
  technicalScore      Int?      @map("technical_score")
  communicationScore  Int?      @map("communication_score")
  culturalFitScore    Int?      @map("cultural_fit_score")
  overallScore        Int?      @map("overall_score")
  strengths           String?   @db.Text
  weaknesses          String?   @db.Text
  recommendation      Recommendation
  notes              String?    @db.Text
  createdAt          DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @updatedAt @map("updated_at")
  interview          Interview  @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@map("interview_feedback")
}

model StageTransition {
  id            String    @id @default(cuid())
  applicationId String    @map("application_id")
  fromStage     ApplicationStage @map("from_stage")
  toStage       ApplicationStage @map("to_stage")
  transitionedById String @map("transitioned_by")
  notes         String?   @db.Text
  createdAt     DateTime  @default(now()) @map("created_at")
  application   JobApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  transitionedBy User     @relation("TransitionedBy", fields: [transitionedById], references: [id], onDelete: Cascade)

  @@map("stage_transitions")
}

enum Role {
  ADMIN
  APPLICANT
}

enum LocationType {
  REMOTE
  HYBRID
  ON_SITE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum ExperienceLevel {
  ENTRY
  MID
  SENIOR
  LEAD
  EXECUTIVE
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
  ARCHIVED
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  SHORTLISTED
  INTERVIEWING
  OFFERED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ApplicationStage {
  INITIAL_REVIEW
  TECHNICAL_ASSESSMENT
  FIRST_INTERVIEW
  SECOND_INTERVIEW
  FINAL_INTERVIEW
  OFFER
  COMPLETED
}

enum InterviewType {
  PHONE
  VIDEO
  ON_SITE
  TECHNICAL
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum Recommendation {
  STRONG_YES
  YES
  MAYBE
  NO
  STRONG_NO
}