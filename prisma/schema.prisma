generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  APPLICANT
}

enum LocationType {
  REMOTE
  HYBRID
  ON_SITE
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
}

enum ExperienceLevel {
  ENTRY
  MID
  SENIOR
  LEAD
  EXECUTIVE
}

enum JobStatus {
  DRAFT
  PUBLISHED
  CLOSED
  ARCHIVED
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  SHORTLISTED
  INTERVIEWING
  OFFERED
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum ApplicationStage {
  INITIAL_REVIEW
  TECHNICAL_ASSESSMENT
  FIRST_INTERVIEW
  SECOND_INTERVIEW
  FINAL_INTERVIEW
  OFFER
  COMPLETED
}

enum InterviewType {
  PHONE
  VIDEO
  ON_SITE
  TECHNICAL
}

enum InterviewStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum Recommendation {
  STRONG_YES
  YES
  MAYBE
  NO
  STRONG_NO
}

model User {
  id               BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  email            String            @unique
  password_hash    String // Cambiado de password a password_hash  
  first_name       String            @db.VarChar(100)
  last_name        String            @db.VarChar(100)
  role             Role              @default(APPLICANT)
  phone            String?           @db.VarChar(20)
  profile_picture  String?           @db.VarChar(255)
  company_id       Int? // Mantenido como INT seg√∫n el schema SQL  
  resume_url       String?           @db.VarChar(255)
  linkedin_url     String?           @db.VarChar(255)
  github_url       String?           @db.VarChar(255)
  is_active        Boolean           @default(true)
  created_at       DateTime          @default(now()) @db.Timestamp()
  updated_at       DateTime          @updatedAt @db.Timestamp()
  applications     JobApplication[]
  interviews       Interview[]       @relation("Interviewer")
  stageTransitions StageTransition[] @relation("TransitionedBy")

  @@index([email], name: "idx_email")
  @@index([role], name: "idx_role")
  @@map("users")
}

model Company {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name         String    @db.VarChar(255)
  description  String?   @db.Text
  logo_url     String?   @db.VarChar(255)
  website      String?   @db.VarChar(255)
  industry     String?   @db.VarChar(100)
  company_size String?   @db.VarChar(50)
  founded_year Int?      @db.Year
  location     String?   @db.VarChar(255)
  is_verified  Boolean   @default(false)
  created_at   DateTime  @default(now()) @db.Timestamp()
  updated_at   DateTime  @updatedAt @db.Timestamp()
  jobs         JobPost[]

  @@index([name], name: "idx_name")
  @@index([industry], name: "idx_industry")
  @@map("companies")
}

model JobPost {
  id                   BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  company_id           BigInt           @db.UnsignedBigInt
  title                String           @db.VarChar(255)
  description          String           @db.Text
  requirements         String           @db.Text
  responsibilities     String           @db.Text
  location_type        LocationType
  location             String?          @db.VarChar(255)
  employment_type      EmploymentType
  experience_level     ExperienceLevel
  salary_min           Decimal?         @db.Decimal(12, 2)
  salary_max           Decimal?         @db.Decimal(12, 2)
  salary_currency      String?          @db.Char(3)
  status               JobStatus        @default(DRAFT)
  application_deadline DateTime         @db.Date
  created_at           DateTime         @default(now()) @db.Timestamp()
  updated_at           DateTime         @updatedAt @db.Timestamp()
  company              Company          @relation(fields: [company_id], references: [id], onDelete: Cascade)
  applications         JobApplication[]
  skills               JobSkill[]

  @@index([status], name: "idx_status")
  @@index([application_deadline], name: "idx_deadline")
  @@index([location_type], name: "idx_location_type")
  @@index([employment_type], name: "idx_employment_type")
  @@map("job_posts")
}

model JobSkill {
  id          BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  job_post_id BigInt  @db.UnsignedBigInt
  skill_name  String  @db.VarChar(100)
  is_required Boolean @default(true)
  jobPost     JobPost @relation(fields: [job_post_id], references: [id], onDelete: Cascade)

  @@index([skill_name], name: "idx_skill_name")
  @@map("job_skills")
}

model JobApplication {
  id               BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  job_post_id      BigInt            @db.UnsignedBigInt
  applicant_id     BigInt            @db.UnsignedBigInt
  status           ApplicationStatus @default(PENDING)
  cover_letter     String?           @db.Text
  resume_version   String            @db.VarChar(255)
  current_stage    ApplicationStage  @default(INITIAL_REVIEW)
  created_at       DateTime          @default(now()) @db.Timestamp()
  updated_at       DateTime          @updatedAt @db.Timestamp()
  jobPost          JobPost           @relation(fields: [job_post_id], references: [id], onDelete: Cascade)
  applicant        User              @relation(fields: [applicant_id], references: [id], onDelete: Cascade)
  interviews       Interview[]
  stageTransitions StageTransition[]

  @@unique([job_post_id, applicant_id], name: "unique_application")
  @@index([status], name: "idx_status")
  @@index([current_stage], name: "idx_current_stage")
  @@map("applications")
}

model Interview {
  id               BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  application_id   BigInt             @db.UnsignedBigInt
  interviewer_id   BigInt             @db.UnsignedBigInt
  type             InterviewType
  scheduled_at     DateTime           @db.DateTime()
  duration_minutes Int
  location         String?            @db.VarChar(255)
  meeting_link     String?            @db.VarChar(255)
  notes            String?            @db.Text
  reschedule_count Int                @default(0) @db.UnsignedTinyInt
  status           InterviewStatus    @default(SCHEDULED)
  created_at       DateTime           @default(now()) @db.Timestamp()
  updated_at       DateTime           @updatedAt @db.Timestamp()
  application      JobApplication     @relation(fields: [application_id], references: [id], onDelete: Cascade)
  interviewer      User               @relation("Interviewer", fields: [interviewer_id], references: [id], onDelete: Cascade)
  feedback         InterviewFeedback?

  @@index([scheduled_at], name: "idx_scheduled_at")
  @@index([status], name: "idx_status")
  @@map("interviews")
}

model InterviewFeedback {
  id                  BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  interview_id        BigInt         @unique @db.UnsignedBigInt
  technical_score     Int?           @db.TinyInt
  communication_score Int?           @db.TinyInt
  cultural_fit_score  Int?           @db.TinyInt
  overall_score       Int?           @db.TinyInt
  strengths           String?        @db.Text
  weaknesses          String?        @db.Text
  recommendation      Recommendation
  notes               String?        @db.Text
  created_at          DateTime       @default(now()) @db.Timestamp()
  updated_at          DateTime       @updatedAt @db.Timestamp()
  interview           Interview      @relation(fields: [interview_id], references: [id], onDelete: Cascade)

  @@map("interview_feedback")
}

model StageTransition {
  id              BigInt           @id @default(autoincrement()) @db.UnsignedBigInt
  application_id  BigInt           @db.UnsignedBigInt
  from_stage      ApplicationStage
  to_stage        ApplicationStage
  transitioned_by BigInt           @db.UnsignedBigInt
  notes           String?          @db.Text
  created_at      DateTime         @default(now()) @db.Timestamp()
  application     JobApplication   @relation(fields: [application_id], references: [id], onDelete: Cascade)
  transitionedBy  User             @relation("TransitionedBy", fields: [transitioned_by], references: [id], onDelete: Cascade)

  @@index([application_id, to_stage], name: "idx_application_stage")
  @@map("stage_transitions")
}
